#!/usr/bin/python
##############################################################
##                                                          ##
##         HP Pavilion TX2*, HP 2700, & TM2 series          ##
##                automatic rotation support                ##
##                                                          ##
##   Created by Barynin Konstantin ( red_lion@inbox.ru )    ##
##    Co-author: Buran Ayuthia                              ##
##  Contributor:  Favux                                     ##
##############################################################

## Changelog:
# 0.1 - just write this code. Need some fix.
# 0.2 - fix some errors in lang
#    advanced close resize window to normal state
#    add before state change commands
#    pyinotify now is not depend       
#    disable/enable in menu now change depend of state
#    add about
# 0.2-2 changed state_hp_wmi_patched check to before the
#        state_hp_wmi detection
#       changed icons to redo/undo
#       About, Sessions/Startup Applications, and spelling
# 0.2-3 placed 'before' before 'after' in Advanced Settings
#    added "pretty" icons
#    more spelling corrections
# 0.2-4 changed autostart_file_path from tx2xxx_support
#     to magick-rotation & config_file from tx2xxx.conf
#     to magick-rotation.conf
#    changed pynotify.init from TX2xxx notification to
#     magick-rotation notification
#    changed setup title to "Magick's TX2* support setup"
#    added name Magick Rotation to About and prettied it up
#    got the last of the spelling I think
# 0.2-5 Ayuthia's fix for CellWriter hang <os.system(i + "&")>
#     and added '&' warning to Advanced Settings
#    fixed long standing bug in Advanced Settings table,
#     should be (input_label, 0, 1, 9, 10) not 0, 2, 9, 10)
#    cleaned up Setup/Advanced Settings, hid "Xrandr program
#     path" and "XSetWacom path", added spacer's
#    relabeled to add HP 2700's - changed setup title to
#     "Magick's HP tablet pc Setup", autostart name to
#     "Magick Rotation for HP tablet pc's"
#    changed to redo icon in Sessions/Startup Applications
# 0.3 - incorporated Ayuthia's debugging code with command line
#     option 'debug' and moved logging option 'log' to gui with
#     checkbox (import datetime)
#    added missing About close button, named it 'OK', moved
#     both to Advanced Setup
#    more cosmetic improvements (import pango)
#    cleaned out cruft
# 0.3-1 added borders for Setup & About windows & moved OK button
#     to About window
# 0.3-2 added stock gtk buttons, moved About button back to setup
# 0.3-3 added GPL; added gali98's mkdir '~/.config/autostart/' code,
#     lines #200 & 201 (e.g. missing in clean install); removed
#     separator line above OK button in About action_area
# 0.4 Added Ayuthia's i = "\"" + i + "\"" to 'make array for exec'
#     loop.  Adds quotes for Lucid's new naming convention so
#     new Device Names are usable in Advanced Setup inputs.
# 0.5 - added Ayuthia's xrotate.py rotation script so that evdev
#     devices can be rotated along with Wacom devices, removes
#     need to enter Device Names in Advanced Setup
#    added HP TM2t to supported models in About
# 1.0 Converted scripts to be object oriented and separated the
#     notifier, configuration file, GUI, and main section
# 1.1 Added touch on/off capabilities
# 1.2 Pulled hp-wmi logic out of the magick-rotation and is now
#     listening to xrandr events instead.  hp-wmi is now its own
#     script that listens to the hp-wmi event.

prog_ver="1.2"

import thread
from gui_gtk import *
from listener import *
from debug import *
import sys
import os
from hinge import *
import platform

global pynotify_support
try:
    import pynotify
    pynotify_support = True
except:
    print "Please install pynotify.  It is not required but it makes the experience better."
    pynotify_support = False

class engine:
    def __init__(self):
        self.tray = tray_gui(self)
        self.win = magick_gui()
        debug_on = False
        if len(sys.argv) > 1:
            if sys.argv[1] == "debug":
                debug_on = True
        self.debug = debug(debug_on, self.win)
        self.notifier = listener(debug_on, self.win)
        h = hinge(self.win)
        self.switch = h.get_switch()

        # notify init
        if pynotify_support:
            notify_timeout = int(self.win.adv_table.get_isnotify_timeout())
            pynotify.init('magick-rotation notification')
            self.notify_tablet = pynotify.Notification("Tablet state", "Rotate to tablet")
            self.notify_tablet.set_timeout(notify_timeout)
            self.notify_normal = pynotify.Notification("Tablet state", "Rotate to normal")
            self.notify_normal.set_timeout(notify_timeout)
            self.touch_on = pynotify.Notification("Touch status", "On")
            self.touch_on.set_timeout(notify_timeout)
            self.touch_off = pynotify.Notification("Touch status", "Off")
            self.touch_off.set_timeout(notify_timeout)
            self.notify_error = pynotify.Notification("Tablet state", "Error get hp_wmi data")
            self.notify_error.set_timeout(notify_timeout)

        # Turn on touch
        self.touch_toggle = 0
        self.toggle_touch()

    def display_config_window(self, widget=None):
        self.win.show_all()

    def run(self):
        if self.switch:
            thread.start_new_thread(self.switch.run, (None,))
        thread.start_new_thread(self.notifier.state_notifier, (self.state_change,))
        gtk.main()

    def toggle_rotate(self, option=None, data=None):
        self.notifier.toggle_polling()
        self.tray.update_poll_status(self.notifier.get_polling_status())

    def toggle_touch(self):
        isnotify = self.win.adv_table.get_isnotify_button()
        self.touch_toggle =  not self.touch_toggle
        device = touch()
        device.toggle_touch(self.touch_toggle)
        if ((isnotify) & (pynotify_support)): 
            if self.touch_toggle:
                self.touch_on.show()
            else:
                self.touch_off.show()

    def get_touch_status(self):
        return self.touch_toggle

    def process_rotation(self, direction):
        device = rotate()
        rot_dir = ["normal", "left", "right", "inverted"]

        # Process any application before rotating
        if direction == 0:
            before_script = self.win.adv_table.get_before_normal()
            if before_script:
                self.debug.debug("calling %s" % before_script)
                os.system(before_script + "&")
            self.debug.debug("calling rotation a: ")
            self.debug.debug(rot_dir[direction])
            device.rotate_devices(rot_dir[direction])
            after_script = self.win.adv_table.get_after_normal()
            if after_script:
                self.debug.debug("calling %s" % after_script)
                os.system(after_script + "&")
        else:
            before_script = self.win.adv_table.get_before_tablet()
            if before_script:
                self.debug.debug("calling %s" % before_script)
                os.system(before_script + "&")
            self.debug.debug("calling rotation b: ")
            self.debug.debug(rot_dir[direction])
            device.rotate_devices(rot_dir[direction])
            after_script = self.win.adv_table.get_after_tablet()
            if after_script:
                self.debug.debug("calling %s" % after_script)
                os.system(after_script + "&")

    def state_change(self, direction):
        isnotify = self.win.adv_table.get_isnotify_button()
        self.process_rotation(direction)
        if (direction == 0):
            self.debug.debug("Change to normal state")
            self.tray.set_tooltip("Normal mode")
            if ((isnotify) & (pynotify_support)): 
                self.notify_normal.show()
        else:
            self.debug.debug("Change to Tablet mode")
            self.tray.set_tooltip("Tablet mode")
            if ((isnotify) & (pynotify_support)): 
                self.notify_tablet.show()

    def quit(self, widget=None):
        version = platform.machine()
        check_machine = "checkmagick32"
        if version == "x86_64":
            check_machine = "checkmagick64"
        kill_check = "killall " + check_machine
        self.debug.debug(kill_check)
        cur_state = getstatusoutput(kill_check)[0] / 256

        gtk.main_quit()
        self.notifier.stop_processing()

if __name__ == "__main__":
    path = "."
    if argv:
        path = os.path.dirname(sys.argv[0])
        if not path:
            path = "."

    sudo = "gksu "
    command = "stat /usr/bin/gksudo"
    is_gksudo = getstatusoutput(command) [0]
    if is_gksudo == 0:
       sudo = "gksudo "
       
    command = "stat /usr/bin/gksu"
    is_gksu = getstatusoutput(command) [0]
    if is_gksu == 0:
       sudo = "gksu "

    command = "stat /usr/bin/kdesudo"
    is_kdesudo = getstatusoutput(command)[0]
    if is_kdesudo == 0:
        sudo = "kdesudo -c "
    
    command = "stat " + path + "/firstrun"
    run_install = getstatusoutput(command)[0]
    
    if run_install == 0: 
        command = sudo + "'python " + path + "/installer_gtk.py'"
        success = getstatusoutput(command)[0]
        sys.exit(success)
    magick = engine()
    magick.run()

# ToDo:
# 1) About // maked
# 2) Better look  // made (in 0.3-2)
# 3) Quickstart (need to patch last)
# 4) last commands better in background? // made (in 0.2-5)
# 5) recalibration on exit from suspend (errors on some users)
# 6) code need clean
# 7) need make pyinotify as requie - not depend // maked
# 8) add debug code // made (in 0.3)
# 9) add debug logging check box // made (in 0.3)
#10) make proper title for About // made (in 0.3)
#11) format buttons & setup windows // made (in 0.3-2)
#12) add GPL // made (in 0.3-3)

#######################################)#######################
##  This program is free software; you can redistribute it  ##
##  and/or modify it under the terms of the GNU General     ##
##  Public license as published by the Free Software        ##
##  Foundation; either version 2 of the License, or (at     ## 
##  your option) any later version.                         ##
##############################################################
